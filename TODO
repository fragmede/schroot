TODO
----

* chroot access should be restricted to a certain number of
  concurrent users (defaulting to 1).  This could be implemented
  with POSIX semaphores using sem_open()/sem_trywait()/sem_close().

* As an alternative to "plain" chroots, also support chroots which
  are

  - mounted on demand
  - snapshot from LVM logical volumes
  - Xen hosts (also LVM snapshots).

* Add mount-options property to SbuildChrootDevice to use in 10mount.

* Alternate chroots will require hook scripts to customise them.
  For example, network setup.  Xen in particular will require
  DHCP or static IP configuration and a dynamic hostname in order
  to connect.

  Now we have /etc/schroot/setup.d, do we need other directories
  for other chroot types, or is this sufficient?  We can always
  selectively set additional environment variables for different
  chroot types (e.g. LVM LV names).

  - /etc/schroot/plain.d           Plain chroot setup scripts
  - /etc/schroot/lvmsnapshot.d     LVM snapshot setup
  - /etc/schroot/xenlvmsnapshot.d  Xen LVM snapshot setup
  - /usr/libexec/schroot           schroot setup programs }
  - /usr/share/schroot/setup       schroot setup scripts  }

* Currently, a session consists of authentication/authorisation, followed
  by session setup, entering a chroot and running commands.  When using a
  non-chroot setups, we also need to consider:

  - initial chroot setup
  - chroot entry/access, possibly over a network
  - running commands, independently, each with their own exit status
    (sbuild)
  - chroot exit
  - final chroot teardown

  We also need to consider concurrent access to the chroot during this
  time.  Chroot setup/teardown might be expensive, and should only be
  done once per session.  Therefore there must be a mechanism of
  preserving it while running multiple commands.

  Chroot entry and exit might be done at the same time as setup/teardown,
  bit it might equally involve e.g. ssh connections, and if running
  several commands, it's important not to tear down the chroot between
  commands.

  If maxusers=2, user 1 could initiate the session, leaving user 2 to
  connect as many times as necessary while user 1 remains connected, but
  idle, and then teardown would take place when the last session exited
  (e.g. using semaphores).

* LVM snapshots would allow a daily update and dist-upgrade of the master
  chroot, without interfering with sessions running in snapshots.


SECURITY
--------

Should schroot be converted to C++ for security, or is glib secure
enough?  Please get in touch if you have any thoughts.
