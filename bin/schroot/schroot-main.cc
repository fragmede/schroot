/* Copyright Â© 2005-2007  Roger Leigh <rleigh@debian.org>
 *
 * schroot is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * schroot is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 *********************************************************************/

#include <config.h>

#include <sbuild/sbuild-config.h>
#ifdef SBUILD_FEATURE_PAM
#include <sbuild/sbuild-auth-pam.h>
#include <sbuild/sbuild-auth-pam-conv-tty.h>
#endif

#include "schroot-main.h"

#include <cstdlib>
#include <ctime>
#include <iostream>
#include <locale>

#include <termios.h>
#include <unistd.h>

#include <boost/format.hpp>

using std::endl;
using boost::format;
using sbuild::_;
using namespace schroot;

main::main (options_base::ptr& options):
  main_base("schroot",
	    // TRANSLATORS: '...' is an ellipsis e.g. U+2026, and '-'
	    // is an em-dash.
	    _("[OPTION...] [COMMAND] - run command or shell in a chroot"),
	    options,
	    true)
{
}

main::~main ()
{
}

void
main::action_config ()
{
  std::cout << "# "
    // TRANSLATORS: %1% = program name
    // TRANSLATORS: %2% = program version
    // TRANSLATORS: %3% = current date
	    << format(_("schroot configuration generated by %1% %2% on %3%"))
    % this->program_name % VERSION % sbuild::date(time(0))
	    << endl;
  std::cout << endl;
  this->config->print_chroot_config(this->chroots, std::cout);
}

void
main::action_list ()
{
  this->config->print_chroot_list(std::cout);
}

void
main::create_session(sbuild::session::operation sess_op)
{
  sbuild::log_debug(sbuild::DEBUG_INFO) << "Creating schroot session" << endl;

  this->session = sbuild::session::ptr
    (new sbuild::session("schroot", this->config, sess_op, this->chroots));

#ifdef SBUILD_FEATURE_PAM
  sbuild::auth::ptr auth = sbuild::auth_pam::create("schroot");

  sbuild::auth_pam_conv_tty::auth_ptr auth_ptr =
    std::tr1::dynamic_pointer_cast<sbuild::auth_pam>(auth);

  sbuild::auth_pam_conv::ptr conv = sbuild::auth_pam_conv_tty::create(auth_ptr);

  /* Set up authentication timeouts. */
  time_t curtime = 0;
  time(&curtime);
  conv->set_warning_timeout(curtime + 15);
  conv->set_fatal_timeout(curtime + 20);

  this->session->set_auth(auth);
#endif // SBUILD_FEATURE_PAM

  if (!this->options->user.empty())
    this->session->get_auth()->set_user(this->options->user);
}
